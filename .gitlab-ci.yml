image: node:latest

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/

before_script:
  - node -v
  - npm -v
  - npm ci --cache .npm --prefer-offline

stages:
  - build
  - test
  - performance
  - deploy

lint:
  stage: build
  needs: []
  script:
    - npm run lint

build:
  stage: build
  needs: []
  script:
    - npm run build

test:
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  needs: []
  script:
    - npm test
  artifacts:
    when: always
    reports:
      junit:
        - test-reports/jest-junit.xml
      coverage_report:
        coverage_format: cobertura
        path: test-reports/cobertura-coverage.xml

performance:
  stage: test
  needs: ['build', 'test']
  script:
    - npm run build && npm run perf
  when: manual
  allow_failure: true

npm_fixparser:
  stage: deploy
  needs: ['build', 'test']
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG =~ /^release-\d+.\d+.\d+/
      changes:
        - package.json
  script:
    # If no .npmrc if included in the repo, generate a temporary one that is configured to publish to public NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > ~/.npmrc
      fi
    - echo "Created .npmrc with auth token..."

    # Install tools
    - apt-get update
    - apt-get install -y jq

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - NPM_PREVIOUS_VERSION=$(npm view ${NPM_PACKAGE_NAME} versions --json | jq -r "sort_by(.) | .[-1]")
    - echo "Current version on npm is ${NPM_PACKAGE_NAME}@${NPM_PREVIOUS_VERSION}"

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm run build
        npx @biomejs/biome format --write .
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to the NPM registry."
        npm deprecate ${NPM_PACKAGE_NAME}@${NPM_PREVIOUS_VERSION} "Please update ${NPM_PACKAGE_NAME} to latest version!"
        echo "Successfully deprecated previous version ${NPM_PACKAGE_NAME}@${NPM_PREVIOUS_VERSION}..."
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
